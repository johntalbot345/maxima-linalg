/* vim: ft=maxima
*/
/* assume f is a function represented as a list of values [f(1),f(2)...]
 * and that f is 1-1 and its codomain is 1...N. Return a left-inverse to
 * f represented the same way.
 */
leftInv(f, N) := block([i, li],
    li : makelist(i, i, 1, N),
    for i : 1 thru length(f) do (
        li[f[i]] : i
    ),
    li
);
/*
leftInv(f, N) := block([i, li], li : makelist(i, i, 1, N), for i : 1 thru length(f) do ( li[f[i]] : i), li);
*/

/* produce a different left inverse to f. Assumptions as in leftInv */
differentLeftInv(f, N) := block([li, notEltf, cyc, notInImageOf_f, x, i],
    li : leftInv(f, N),
    notEltf(x) := not member(x, f),
    notInImageOf_f : sublist(makelist(i, i, 1, N), notEltf),
    cyc(x) := mod(x, N) + 1,
    li[notInImageOf_f[1]] : cyc(li[notInImageOf_f[1]]),
    li
);
/*
differentLeftInv(f, N) := block([li, notEltf, cyc, notInImageOf_f, x, i], li : leftInv(f, N), notEltf(x) := not member(x, f), notInImageOf_f : sublist(makelist(i, i, 1, N), notEltf), cyc(x) := mod(x, N) + 1, li[notInImageOf_f[1]] : cyc(li[notInImageOf_f[1]]), li);
*/

/* why isn't g a left inverse to f? Return a number such that g(f(i)) \neq i, or
 * 0 if no such number exists. */
whyNotLinv(f, g, N) := block([x],
    x : 0,
    for i : 1 thru length(f) do (
        if (not is(g[f[i]] = i)) then (x : i, return)
    ),
    x
);
/*
whyNotLinv(f, g, N) := block([x], x : 0, for i : 1 thru length(f) do ( if (not is(g[f[i]] = i)) then (x : i, return)), x);
*/

/* check all the elements of a list are in cod. uses
 * the STACK function all_listp */
allInCod(g, cod) := block([x, ok],
    ok(x) := member(x, cod),
    all_listp(g, ok)
);
/*
allInCod(g, cod) := block([x, ok], ok(x) := member(x, cod), all_listp(g, ok));
*/
allInCod2(g, cod) := block([i,x],
    x : 0,
    for i : 1 thru length(g) do (
        if (not (member(g[i], cod))) then x : i
    ),
    x
);


/* random functions with specified injectivity/surjectivity */

/* random nonsurjective noninjective function 1..n to 1..m, assuming m <= 3n-3 */
randomNotOntoNotOneOne(domainsize, codomainsize) := block([i, notInImage, image, func, whereNotOneOne],
    domainlist : makelist(i, i, 1, domainsize),
    codomainlist : makelist(i, i, 1, codomainsize),
    notInImage : rand(codomainlist),
    image : delete(notInImage, codomainlist),
    image : append(image, image, image),
    func : rand_selection(image, domainsize),
    whereNotOneOne : rand_selection(domainlist, 2),
    func[whereNotOneOne[2]] : func[whereNotOneOne[1]],
    func
);

/* random surjective noninjective function 1..domainsize to 
 * 1..codomainsize, assuming domainsize > codomainsize
 */
randomOntoNotOneOne(domainsize, codomainsize) := block([i, gap, image, fn],
    domainlist : makelist(i, i, 1, domainsize),
    codomainlist : makelist(i, i, 1, codomainsize),
    gap : domainsize - codomainsize,
    image : codomainlist,
    image : append(image, rand_selection(image, gap)),
    fn : rand_selection(image, length(image)),
    fn
);


/* random one-to-one not onto function 1..domainsize -> 1..codomainsize,
 * assuming codomainsize > domainsize */
randomOneOneNotOnto(domainsize, codomainsize) := block([domainlist, codomainlist, notInImage, codomainlistOneMissing, func],
    domainlist: makelist(i, i, 1, domainsize),
    codomainlist : makelist(i, i, 1, codomainsize),
    notInImage : rand(codomainlist),
    codomainlistOneMissing : delete(notInImage, codomainlist),
    func : rand_selection(codomainlistOneMissing, length(codomainlistOneMissing)),
    func
);

/* random bijection 1..n -> 1..n */
randomBij(domainsize) := block([func, i, domainlist],
    domainlist : makelist(i, i, 1, domainsize),
    func : rand_selection(domainlist, domainsize),
    func   
);

/* fn is a list, letter is a string, returns the string 
 * letter(1) = fn[1], letter(2) = fn[2], ...,
 */
printfunc(fn, letter) := block([str, i],
    str : "",
    for i : 1 thru length(fn) - 1 do (
        str : sconcat(str, letter, "(", i, ") = ", fn[i], ", ")
    ),
    str : sconcat(str, letter, "(", length(fn), ") = ", fn[length(fn)]),
    str
);

/* partitions of n into at most k parts */
partitions(n, k) := block([i, j, p, pn_of_n_minus_lp, largest_part, new_pn_of_n, output],
    if (n = 0) then return([[]]),
    if (n = 1) then return([[1]]),
    output : [],
    for largest_part : 1 thru min(k, n) do (
        p : partitions(n - largest_part, min(k, largest_part)),
        for j : 1 thru length(p) do (
            pn_of_n_minus_lp : p[j],
            new_pn_of_n : append(pn_of_n_minus_lp, [largest_part]),
            output : append(output, [new_pn_of_n])
            )
        ),
    output
);

/* random set partition of 1..n */
rand_setpartition(n) := block([pns, pn, order, output, i, count, j, current_part, current_part_size],
    pns : partitions(n, n),
    pn : rand(pns),
    order : rand_selection(makelist(i, i, 1, n), n),
    output : {},
    count : 1,
    for i : 1 thru length(pn) do (
        current_part_size : pn[i],
        current_part : {},
        for j : 1 thru current_part_size do (
            current_part : union(current_part, {order[count]}),
            count : count + 1
            ),
        output : union(output, {current_part})
    ),
    output
);

/* are i and j related in the equiv rel corresponding to this pn? */
rel(i, j, pn) := block([output, partno, pnlist],
    output : false,
    pnlist : listify(pn),
    for partno : 1 thru length(pnlist) do (
        if (elementp(i, pnlist[partno]) and elementp(j, pnlist[partno])) then (
            output : true
        )
    ),
    output
);

/* display relation corresponding to this partition of {1...n} in a table */
set_pn_as_table(setpn, n) := block([output, i, rw, cl],
    output : "\\begin{tabular}{l|",
    for i : 1 thru n do (
        output : sconcat(output, "l")
    ),
    output : sconcat(output, "}"),
    for rw : 1 thru n- 1 do (
        for cl : 1 thru n-1 do (
            if rel(rw, cl, setpn) then (
                output : sconcat(output, "x & ")
            ) else (
                output : sconcat(output, " & ")    
            )
        ),
        if rel(rw, n, setpn) then (
            output : sconcat(output, "x \\\\")
        ) else (
            output : sconcat(output, "  \\\\")
        )
    ),
    /* now do the last row */
    for cl : 1 thru n - 1 do (
        if rel(n, cl, setpn) then (
            output : sconcat(output, "x & ")
        ) else (
            output : sconcat(output, " & ")
        )
    ),
    if rel(n, n, setpn) then (
        output : sconcat(output, "x \\end{tabular}")
    ) else (
        output : sconcat(output, "\\end{tabular}")
    ),
    output
);
